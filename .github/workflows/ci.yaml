name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    env:
      PAT: ${{ secrets.PAT }}
      ORGANIZATION_URL: ${{ secrets.ORGANIZATION_URL }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json
  test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      BATON_PAT: ${{ secrets.PAT }}
      BATON_ORGANIZATION_URL: ${{ secrets.ORGANIZATION_URL }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build baton-azure-devops
        run: go build -o baton-azure-devops ./cmd/baton-azure-devops

      - name: Run baton-azure-devops
        run: ./baton-azure-devops --personal-access-token=${{env.BATON_PAT}} --organization-url=${{ env.BATON_ORGANIZATION_URL }}

      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin